#!/usr/bin/env python3

import nmap
import paramiko
import socket
import sys
import os
import time
from colorama import init, Fore, Style
import argparse
import logging
from ftplib import FTP

init()  # Initialize colorama

class ExploitTool:
    def __init__(self):
        self.nm = nmap.PortScanner()
        self.vulnerable_hosts = []
        self.credentials = []
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
    def print_banner(self):
        banner = """
==================================
    System Access Tool Suite     
      Use Responsibly!          
==================================
        """
        print(Fore.RED + banner + Style.RESET_ALL)
        print(Fore.YELLOW + "WARNING: Only use on systems you have permission to test!" + Style.RESET_ALL)

    def port_scan(self, target, ports):
        """Scan for open ports and identify services"""
        try:
            print(f"\n{Fore.GREEN}[+] Scanning target {target}{Style.RESET_ALL}")
            self.nm.scan(target, arguments=f'-p{ports} -sV')
            
            for host in self.nm.all_hosts():
                print(f"\nHost : {host}")
                print(f"State : {self.nm[host].state()}")
                
                for proto in self.nm[host].all_protocols():
                    ports = self.nm[host][proto].keys()
                    for port in ports:
                        state = self.nm[host][proto][port]['state']
                        service = self.nm[host][proto][port]['name']
                        if state == 'open':
                            print(f"Port : {port}\tState : {state}\tService : {service}")
                            self.check_vulnerability(host, port, service)
        
        except Exception as e:
            self.logger.error(f"Error during port scan: {str(e)}")

    def check_vulnerability(self, host, port, service):
        """Check for common vulnerabilities based on service"""
        try:
            if service == 'ssh':
                self.check_ssh_vulnerability(host, port)
            elif service == 'ftp':
                self.check_ftp_vulnerability(host, port)
            elif port == 445 or port == 139:
                self.check_windows_share(host, port)
        except Exception as e:
            self.logger.error(f"Error checking vulnerabilities: {str(e)}")

    def check_ssh_vulnerability(self, host, port):
        """Check SSH service for vulnerabilities"""
        try:
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            # Try common credentials
            common_users = ['admin', 'root', 'user']
            common_passwords = ['admin', 'password', '123456']
            
            for user in common_users:
                for password in common_passwords:
                    try:
                        ssh.connect(host, port=port, username=user, password=password, timeout=5)
                        print(f"{Fore.RED}[!] Weak SSH credentials found - {user}:{password}{Style.RESET_ALL}")
                        self.credentials.append((host, port, 'ssh', user, password))
                        return
                    except paramiko.AuthenticationException:
                        continue
                    except Exception:
                        break
                    finally:
                        ssh.close()
        
        except Exception as e:
            self.logger.error(f"Error checking SSH vulnerability: {str(e)}")

    def check_ftp_vulnerability(self, host, port):
        """Check FTP service for anonymous access"""
        try:
            ftp = FTP()
            ftp.connect(host, port, timeout=5)
            try:
                ftp.login('anonymous', 'anonymous@example.com')
                print(f"{Fore.RED}[!] Anonymous FTP login allowed on {host}{Style.RESET_ALL}")
                # List files in the root directory
                files = ftp.nlst()
                print(f"{Fore.GREEN}[+] Files available:{Style.RESET_ALL}")
                for file in files:
                    print(f"  - {file}")
                self.vulnerable_hosts.append((host, port, 'anonymous_ftp'))
            except:
                pass
            finally:
                ftp.quit()
        except Exception as e:
            self.logger.error(f"Error checking FTP vulnerability: {str(e)}")

    def check_windows_share(self, host, port):
        """Check Windows shares using native socket"""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex((host, port))
            if result == 0:
                print(f"{Fore.YELLOW}[*] Windows share service detected on {host}:{port}{Style.RESET_ALL}")
                # List available shares
                try:
                    os.system(f'net view \\\\{host}')
                    # Try to list files in common shares
                    common_shares = ['C$', 'Users', 'Public', 'Share']
                    for share in common_shares:
                        try:
                            os.system(f'dir \\\\{host}\\{share}')
                        except:
                            continue
                except:
                    pass
            sock.close()
        except Exception as e:
            self.logger.error(f"Error checking Windows shares: {str(e)}")

def main():
    parser = argparse.ArgumentParser(description='System Access Tool - Use responsibly and only with permission')
    parser.add_argument('-t', '--target', required=True, help='Target IP address or hostname')
    parser.add_argument('-p', '--ports', default='21-23,25,80,139,445,3389',
                      help='Ports to scan (default: common ports)')
    parser.add_argument('--force', action='store_true', help='Skip permission confirmation')
    
    args = parser.parse_args()
    
    tool = ExploitTool()
    tool.print_banner()
    
    if not args.force:
        confirm = input(f"{Fore.RED}Do you have permission to test this system? (yes/no): {Style.RESET_ALL}")
        if confirm.lower() != 'yes':
            print("Aborting - permission not confirmed")
            sys.exit(1)
    
    # Start scanning and exploitation
    tool.port_scan(args.target, args.ports)
    
    # If credentials were found
    for host, port, service, username, password in tool.credentials:
        print(f"\n{Fore.RED}[!] Credentials found:{Style.RESET_ALL}")
        print(f"Host: {host}")
        print(f"Port: {port}")
        print(f"Service: {service}")
        print(f"Username: {username}")
        print(f"Password: {password}")
    
    # If vulnerable hosts were found
    for host, port, vulnerability in tool.vulnerable_hosts:
        print(f"\n{Fore.RED}[!] Vulnerable host found:{Style.RESET_ALL}")
        print(f"Host: {host}")
        print(f"Port: {port}")
        print(f"Vulnerability: {vulnerability}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Fore.RED}[!] Program terminated by user{Style.RESET_ALL}")
        sys.exit(0)
    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")
        sys.exit(1)
